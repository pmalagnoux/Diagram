
package webservice;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "WS", targetNamespace = "http://webservice/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface WS {


    /**
     * 
     * @param password
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "encrypt", targetNamespace = "http://webservice/", className = "webservice.Encrypt")
    @ResponseWrapper(localName = "encryptResponse", targetNamespace = "http://webservice/", className = "webservice.EncryptResponse")
    @Action(input = "http://webservice/WS/encryptRequest", output = "http://webservice/WS/encryptResponse")
    public String encrypt(
        @WebParam(name = "password", targetNamespace = "")
        String password);

    /**
     * 
     * @param userLogin
     * @param password
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "access", targetNamespace = "http://webservice/", className = "webservice.Access")
    @ResponseWrapper(localName = "accessResponse", targetNamespace = "http://webservice/", className = "webservice.AccessResponse")
    @Action(input = "http://webservice/WS/accessRequest", output = "http://webservice/WS/accessResponse")
    public boolean access(
        @WebParam(name = "userLogin", targetNamespace = "")
        String userLogin,
        @WebParam(name = "password", targetNamespace = "")
        String password);

    /**
     * 
     * @param login
     * @return
     *     returns webservice.Account
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAccount1", targetNamespace = "http://webservice/", className = "webservice.GetAccount1")
    @ResponseWrapper(localName = "getAccount1Response", targetNamespace = "http://webservice/", className = "webservice.GetAccount1Response")
    @Action(input = "http://webservice/WS/getAccount1Request", output = "http://webservice/WS/getAccount1Response")
    public Account getAccount1(
        @WebParam(name = "login", targetNamespace = "")
        String login);

    /**
     * 
     * @param id
     * @param login
     * @return
     *     returns webservice.Account
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAccount2", targetNamespace = "http://webservice/", className = "webservice.GetAccount2")
    @ResponseWrapper(localName = "getAccount2Response", targetNamespace = "http://webservice/", className = "webservice.GetAccount2Response")
    @Action(input = "http://webservice/WS/getAccount2Request", output = "http://webservice/WS/getAccount2Response")
    public Account getAccount2(
        @WebParam(name = "id", targetNamespace = "")
        int id,
        @WebParam(name = "login", targetNamespace = "")
        String login);

    /**
     * 
     * @param password
     * @param login
     * @param email
     * @return
     *     returns webservice.Account
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAccount3", targetNamespace = "http://webservice/", className = "webservice.GetAccount3")
    @ResponseWrapper(localName = "getAccount3Response", targetNamespace = "http://webservice/", className = "webservice.GetAccount3Response")
    @Action(input = "http://webservice/WS/getAccount3Request", output = "http://webservice/WS/getAccount3Response")
    public Account getAccount3(
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "login", targetNamespace = "")
        String login,
        @WebParam(name = "email", targetNamespace = "")
        String email);

    /**
     * 
     * @param accountId
     * @return
     *     returns java.util.List<webservice.Recipe>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getRecipesbyAccountId", targetNamespace = "http://webservice/", className = "webservice.GetRecipesbyAccountId")
    @ResponseWrapper(localName = "getRecipesbyAccountIdResponse", targetNamespace = "http://webservice/", className = "webservice.GetRecipesbyAccountIdResponse")
    @Action(input = "http://webservice/WS/getRecipesbyAccountIdRequest", output = "http://webservice/WS/getRecipesbyAccountIdResponse")
    public List<Recipe> getRecipesbyAccountId(
        @WebParam(name = "accountId", targetNamespace = "")
        int accountId);

    /**
     * 
     * @param recipeId
     * @return
     *     returns webservice.Difficulty
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getDifficultyById", targetNamespace = "http://webservice/", className = "webservice.GetDifficultyById")
    @ResponseWrapper(localName = "getDifficultyByIdResponse", targetNamespace = "http://webservice/", className = "webservice.GetDifficultyByIdResponse")
    @Action(input = "http://webservice/WS/getDifficultyByIdRequest", output = "http://webservice/WS/getDifficultyByIdResponse")
    public Difficulty getDifficultyById(
        @WebParam(name = "recipeId", targetNamespace = "")
        int recipeId);

    /**
     * 
     * @param recipeId
     * @return
     *     returns java.util.List<webservice.Ingredient>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getIngredientsById", targetNamespace = "http://webservice/", className = "webservice.GetIngredientsById")
    @ResponseWrapper(localName = "getIngredientsByIdResponse", targetNamespace = "http://webservice/", className = "webservice.GetIngredientsByIdResponse")
    @Action(input = "http://webservice/WS/getIngredientsByIdRequest", output = "http://webservice/WS/getIngredientsByIdResponse")
    public List<Ingredient> getIngredientsById(
        @WebParam(name = "recipeId", targetNamespace = "")
        int recipeId);

    /**
     * 
     * @param userLogin
     * @return
     *     returns int
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCurrentAccountId", targetNamespace = "http://webservice/", className = "webservice.GetCurrentAccountId")
    @ResponseWrapper(localName = "getCurrentAccountIdResponse", targetNamespace = "http://webservice/", className = "webservice.GetCurrentAccountIdResponse")
    @Action(input = "http://webservice/WS/getCurrentAccountIdRequest", output = "http://webservice/WS/getCurrentAccountIdResponse")
    public int getCurrentAccountId(
        @WebParam(name = "userLogin", targetNamespace = "")
        String userLogin);

    /**
     * 
     * @param accountId
     * @return
     *     returns java.util.List<webservice.Recipe>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getFavorites", targetNamespace = "http://webservice/", className = "webservice.GetFavorites")
    @ResponseWrapper(localName = "getFavoritesResponse", targetNamespace = "http://webservice/", className = "webservice.GetFavoritesResponse")
    @Action(input = "http://webservice/WS/getFavoritesRequest", output = "http://webservice/WS/getFavoritesResponse")
    public List<Recipe> getFavorites(
        @WebParam(name = "accountId", targetNamespace = "")
        int accountId);

    /**
     * 
     * @return
     *     returns int
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getLastRecipeId", targetNamespace = "http://webservice/", className = "webservice.GetLastRecipeId")
    @ResponseWrapper(localName = "getLastRecipeIdResponse", targetNamespace = "http://webservice/", className = "webservice.GetLastRecipeIdResponse")
    @Action(input = "http://webservice/WS/getLastRecipeIdRequest", output = "http://webservice/WS/getLastRecipeIdResponse")
    public int getLastRecipeId();

    /**
     * 
     * @param account
     */
    @WebMethod
    @RequestWrapper(localName = "addAccount", targetNamespace = "http://webservice/", className = "webservice.AddAccount")
    @ResponseWrapper(localName = "addAccountResponse", targetNamespace = "http://webservice/", className = "webservice.AddAccountResponse")
    @Action(input = "http://webservice/WS/addAccountRequest", output = "http://webservice/WS/addAccountResponse")
    public void addAccount(
        @WebParam(name = "account", targetNamespace = "")
        Account account);

    /**
     * 
     * @param quantity
     * @param name
     * @return
     *     returns webservice.Ingredient
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getIngredient4", targetNamespace = "http://webservice/", className = "webservice.GetIngredient4")
    @ResponseWrapper(localName = "getIngredient4Response", targetNamespace = "http://webservice/", className = "webservice.GetIngredient4Response")
    @Action(input = "http://webservice/WS/getIngredient4Request", output = "http://webservice/WS/getIngredient4Response")
    public Ingredient getIngredient4(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "quantity", targetNamespace = "")
        double quantity);

    /**
     * 
     * @param recipeId
     * @return
     *     returns webservice.Recipe
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getRecipeById", targetNamespace = "http://webservice/", className = "webservice.GetRecipeById")
    @ResponseWrapper(localName = "getRecipeByIdResponse", targetNamespace = "http://webservice/", className = "webservice.GetRecipeByIdResponse")
    @Action(input = "http://webservice/WS/getRecipeByIdRequest", output = "http://webservice/WS/getRecipeByIdResponse")
    public Recipe getRecipeById(
        @WebParam(name = "recipeId", targetNamespace = "")
        int recipeId);

    /**
     * 
     * @param maxDifficulty
     * @param recipeType
     * @param maxCookingTime
     * @param keyWord
     * @return
     *     returns java.util.List<webservice.Recipe>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getRecipes", targetNamespace = "http://webservice/", className = "webservice.GetRecipes")
    @ResponseWrapper(localName = "getRecipesResponse", targetNamespace = "http://webservice/", className = "webservice.GetRecipesResponse")
    @Action(input = "http://webservice/WS/getRecipesRequest", output = "http://webservice/WS/getRecipesResponse")
    public List<Recipe> getRecipes(
        @WebParam(name = "maxDifficulty", targetNamespace = "")
        int maxDifficulty,
        @WebParam(name = "recipeType", targetNamespace = "")
        int recipeType,
        @WebParam(name = "maxCookingTime", targetNamespace = "")
        int maxCookingTime,
        @WebParam(name = "keyWord", targetNamespace = "")
        String keyWord);

    /**
     * 
     * @param id
     * @return
     *     returns webservice.Ingredient
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getIngredient1", targetNamespace = "http://webservice/", className = "webservice.GetIngredient1")
    @ResponseWrapper(localName = "getIngredient1Response", targetNamespace = "http://webservice/", className = "webservice.GetIngredient1Response")
    @Action(input = "http://webservice/WS/getIngredient1Request", output = "http://webservice/WS/getIngredient1Response")
    public Ingredient getIngredient1(
        @WebParam(name = "id", targetNamespace = "")
        int id);

    /**
     * 
     * @param recipeId
     * @return
     *     returns webservice.RecipeType
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getTypeById", targetNamespace = "http://webservice/", className = "webservice.GetTypeById")
    @ResponseWrapper(localName = "getTypeByIdResponse", targetNamespace = "http://webservice/", className = "webservice.GetTypeByIdResponse")
    @Action(input = "http://webservice/WS/getTypeByIdRequest", output = "http://webservice/WS/getTypeByIdResponse")
    public RecipeType getTypeById(
        @WebParam(name = "recipeId", targetNamespace = "")
        int recipeId);

    /**
     * 
     * @param recipe
     */
    @WebMethod
    @RequestWrapper(localName = "addRecipe", targetNamespace = "http://webservice/", className = "webservice.AddRecipe")
    @ResponseWrapper(localName = "addRecipeResponse", targetNamespace = "http://webservice/", className = "webservice.AddRecipeResponse")
    @Action(input = "http://webservice/WS/addRecipeRequest", output = "http://webservice/WS/addRecipeResponse")
    public void addRecipe(
        @WebParam(name = "recipe", targetNamespace = "")
        Recipe recipe);

    /**
     * 
     * @param id
     * @param content
     * @return
     *     returns webservice.Step
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getStep2", targetNamespace = "http://webservice/", className = "webservice.GetStep2")
    @ResponseWrapper(localName = "getStep2Response", targetNamespace = "http://webservice/", className = "webservice.GetStep2Response")
    @Action(input = "http://webservice/WS/getStep2Request", output = "http://webservice/WS/getStep2Response")
    public Step getStep2(
        @WebParam(name = "id", targetNamespace = "")
        int id,
        @WebParam(name = "content", targetNamespace = "")
        String content);

    /**
     * 
     * @param difficulty
     * @param quantity
     * @param name
     * @param preparationTime
     * @param type
     * @param cookingTime
     * @param account
     * @return
     *     returns webservice.Recipe
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getRecipe2", targetNamespace = "http://webservice/", className = "webservice.GetRecipe2")
    @ResponseWrapper(localName = "getRecipe2Response", targetNamespace = "http://webservice/", className = "webservice.GetRecipe2Response")
    @Action(input = "http://webservice/WS/getRecipe2Request", output = "http://webservice/WS/getRecipe2Response")
    public Recipe getRecipe2(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "preparationTime", targetNamespace = "")
        int preparationTime,
        @WebParam(name = "cookingTime", targetNamespace = "")
        int cookingTime,
        @WebParam(name = "quantity", targetNamespace = "")
        int quantity,
        @WebParam(name = "account", targetNamespace = "")
        int account,
        @WebParam(name = "difficulty", targetNamespace = "")
        int difficulty,
        @WebParam(name = "type", targetNamespace = "")
        int type);

    /**
     * 
     * @param difficulty
     * @param quantity
     * @param name
     * @param preparationTime
     * @param id
     * @param type
     * @param cookingTime
     * @param likeNumber
     * @param account
     * @return
     *     returns webservice.Recipe
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getRecipe3", targetNamespace = "http://webservice/", className = "webservice.GetRecipe3")
    @ResponseWrapper(localName = "getRecipe3Response", targetNamespace = "http://webservice/", className = "webservice.GetRecipe3Response")
    @Action(input = "http://webservice/WS/getRecipe3Request", output = "http://webservice/WS/getRecipe3Response")
    public Recipe getRecipe3(
        @WebParam(name = "id", targetNamespace = "")
        int id,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "preparationTime", targetNamespace = "")
        int preparationTime,
        @WebParam(name = "cookingTime", targetNamespace = "")
        int cookingTime,
        @WebParam(name = "likeNumber", targetNamespace = "")
        int likeNumber,
        @WebParam(name = "quantity", targetNamespace = "")
        int quantity,
        @WebParam(name = "account", targetNamespace = "")
        int account,
        @WebParam(name = "difficulty", targetNamespace = "")
        int difficulty,
        @WebParam(name = "type", targetNamespace = "")
        int type);

    /**
     * 
     * @param name
     * @return
     *     returns webservice.Tag
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getTag2", targetNamespace = "http://webservice/", className = "webservice.GetTag2")
    @ResponseWrapper(localName = "getTag2Response", targetNamespace = "http://webservice/", className = "webservice.GetTag2Response")
    @Action(input = "http://webservice/WS/getTag2Request", output = "http://webservice/WS/getTag2Response")
    public Tag getTag2(
        @WebParam(name = "name", targetNamespace = "")
        String name);

    /**
     * 
     * @param name
     * @return
     *     returns webservice.Ustensil
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getUstensil2", targetNamespace = "http://webservice/", className = "webservice.GetUstensil2")
    @ResponseWrapper(localName = "getUstensil2Response", targetNamespace = "http://webservice/", className = "webservice.GetUstensil2Response")
    @Action(input = "http://webservice/WS/getUstensil2Request", output = "http://webservice/WS/getUstensil2Response")
    public Ustensil getUstensil2(
        @WebParam(name = "name", targetNamespace = "")
        String name);

    /**
     * 
     * @return
     *     returns java.util.List<webservice.Ingredient>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getIngredients", targetNamespace = "http://webservice/", className = "webservice.GetIngredients")
    @ResponseWrapper(localName = "getIngredientsResponse", targetNamespace = "http://webservice/", className = "webservice.GetIngredientsResponse")
    @Action(input = "http://webservice/WS/getIngredientsRequest", output = "http://webservice/WS/getIngredientsResponse")
    public List<Ingredient> getIngredients();

    /**
     * 
     * @param name
     * @param id
     * @return
     *     returns webservice.Difficulty
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getDifficulty", targetNamespace = "http://webservice/", className = "webservice.GetDifficulty")
    @ResponseWrapper(localName = "getDifficultyResponse", targetNamespace = "http://webservice/", className = "webservice.GetDifficultyResponse")
    @Action(input = "http://webservice/WS/getDifficultyRequest", output = "http://webservice/WS/getDifficultyResponse")
    public Difficulty getDifficulty(
        @WebParam(name = "id", targetNamespace = "")
        int id,
        @WebParam(name = "name", targetNamespace = "")
        String name);

    /**
     * 
     * @param name
     * @param id
     * @return
     *     returns webservice.Tag
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getTag3", targetNamespace = "http://webservice/", className = "webservice.GetTag3")
    @ResponseWrapper(localName = "getTag3Response", targetNamespace = "http://webservice/", className = "webservice.GetTag3Response")
    @Action(input = "http://webservice/WS/getTag3Request", output = "http://webservice/WS/getTag3Response")
    public Tag getTag3(
        @WebParam(name = "id", targetNamespace = "")
        int id,
        @WebParam(name = "name", targetNamespace = "")
        String name);

    /**
     * 
     * @param recipe
     * @param account
     * @return
     *     returns webservice.Favorite
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getFavorite", targetNamespace = "http://webservice/", className = "webservice.GetFavorite")
    @ResponseWrapper(localName = "getFavoriteResponse", targetNamespace = "http://webservice/", className = "webservice.GetFavoriteResponse")
    @Action(input = "http://webservice/WS/getFavoriteRequest", output = "http://webservice/WS/getFavoriteResponse")
    public Favorite getFavorite(
        @WebParam(name = "account", targetNamespace = "")
        int account,
        @WebParam(name = "recipe", targetNamespace = "")
        int recipe);

    /**
     * 
     * @param name
     * @return
     *     returns webservice.RecipeType
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getRecipeType1", targetNamespace = "http://webservice/", className = "webservice.GetRecipeType1")
    @ResponseWrapper(localName = "getRecipeType1Response", targetNamespace = "http://webservice/", className = "webservice.GetRecipeType1Response")
    @Action(input = "http://webservice/WS/getRecipeType1Request", output = "http://webservice/WS/getRecipeType1Response")
    public RecipeType getRecipeType1(
        @WebParam(name = "name", targetNamespace = "")
        String name);

    /**
     * 
     * @param quantity
     * @param name
     * @param id
     * @return
     *     returns webservice.Ingredient
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getIngredient5", targetNamespace = "http://webservice/", className = "webservice.GetIngredient5")
    @ResponseWrapper(localName = "getIngredient5Response", targetNamespace = "http://webservice/", className = "webservice.GetIngredient5Response")
    @Action(input = "http://webservice/WS/getIngredient5Request", output = "http://webservice/WS/getIngredient5Response")
    public Ingredient getIngredient5(
        @WebParam(name = "id", targetNamespace = "")
        int id,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "quantity", targetNamespace = "")
        double quantity);

    /**
     * 
     * @param name
     * @return
     *     returns webservice.Ingredient
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getIngredient2", targetNamespace = "http://webservice/", className = "webservice.GetIngredient2")
    @ResponseWrapper(localName = "getIngredient2Response", targetNamespace = "http://webservice/", className = "webservice.GetIngredient2Response")
    @Action(input = "http://webservice/WS/getIngredient2Request", output = "http://webservice/WS/getIngredient2Response")
    public Ingredient getIngredient2(
        @WebParam(name = "name", targetNamespace = "")
        String name);

    /**
     * 
     * @param name
     * @param id
     * @return
     *     returns webservice.Recipe
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getRecipe1", targetNamespace = "http://webservice/", className = "webservice.GetRecipe1")
    @ResponseWrapper(localName = "getRecipe1Response", targetNamespace = "http://webservice/", className = "webservice.GetRecipe1Response")
    @Action(input = "http://webservice/WS/getRecipe1Request", output = "http://webservice/WS/getRecipe1Response")
    public Recipe getRecipe1(
        @WebParam(name = "id", targetNamespace = "")
        int id,
        @WebParam(name = "name", targetNamespace = "")
        String name);

    /**
     * 
     * @param id
     * @return
     *     returns webservice.Tag
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getTag1", targetNamespace = "http://webservice/", className = "webservice.GetTag1")
    @ResponseWrapper(localName = "getTag1Response", targetNamespace = "http://webservice/", className = "webservice.GetTag1Response")
    @Action(input = "http://webservice/WS/getTag1Request", output = "http://webservice/WS/getTag1Response")
    public Tag getTag1(
        @WebParam(name = "id", targetNamespace = "")
        int id);

    /**
     * 
     * @param login
     * @param email
     * @return
     *     returns java.util.List<java.lang.Boolean>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "isAvailable", targetNamespace = "http://webservice/", className = "webservice.IsAvailable")
    @ResponseWrapper(localName = "isAvailableResponse", targetNamespace = "http://webservice/", className = "webservice.IsAvailableResponse")
    @Action(input = "http://webservice/WS/isAvailableRequest", output = "http://webservice/WS/isAvailableResponse")
    public List<Boolean> isAvailable(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "login", targetNamespace = "")
        String login);

    /**
     * 
     * @param name
     * @param id
     * @return
     *     returns webservice.RecipeType
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getRecipeType2", targetNamespace = "http://webservice/", className = "webservice.GetRecipeType2")
    @ResponseWrapper(localName = "getRecipeType2Response", targetNamespace = "http://webservice/", className = "webservice.GetRecipeType2Response")
    @Action(input = "http://webservice/WS/getRecipeType2Request", output = "http://webservice/WS/getRecipeType2Response")
    public RecipeType getRecipeType2(
        @WebParam(name = "id", targetNamespace = "")
        int id,
        @WebParam(name = "name", targetNamespace = "")
        String name);

    /**
     * 
     * @param recipeNumber
     * @return
     *     returns java.util.List<webservice.Recipe>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getRandomRecipes", targetNamespace = "http://webservice/", className = "webservice.GetRandomRecipes")
    @ResponseWrapper(localName = "getRandomRecipesResponse", targetNamespace = "http://webservice/", className = "webservice.GetRandomRecipesResponse")
    @Action(input = "http://webservice/WS/getRandomRecipesRequest", output = "http://webservice/WS/getRandomRecipesResponse")
    public List<Recipe> getRandomRecipes(
        @WebParam(name = "recipeNumber", targetNamespace = "")
        int recipeNumber);

    /**
     * 
     * @param accountId
     * @param recipeId
     */
    @WebMethod
    @RequestWrapper(localName = "removeFavorite", targetNamespace = "http://webservice/", className = "webservice.RemoveFavorite")
    @ResponseWrapper(localName = "removeFavoriteResponse", targetNamespace = "http://webservice/", className = "webservice.RemoveFavoriteResponse")
    @Action(input = "http://webservice/WS/removeFavoriteRequest", output = "http://webservice/WS/removeFavoriteResponse")
    public void removeFavorite(
        @WebParam(name = "accountId", targetNamespace = "")
        int accountId,
        @WebParam(name = "recipeId", targetNamespace = "")
        int recipeId);

    /**
     * 
     * @return
     *     returns java.util.List<webservice.RecipeType>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getRecipeTypes", targetNamespace = "http://webservice/", className = "webservice.GetRecipeTypes")
    @ResponseWrapper(localName = "getRecipeTypesResponse", targetNamespace = "http://webservice/", className = "webservice.GetRecipeTypesResponse")
    @Action(input = "http://webservice/WS/getRecipeTypesRequest", output = "http://webservice/WS/getRecipeTypesResponse")
    public List<RecipeType> getRecipeTypes();

    /**
     * 
     * @param difficulty
     * @param quantity
     * @param name
     * @param preparationTime
     * @param id
     * @param type
     * @param tagsID
     * @param cookingTime
     * @param likeNumber
     * @param account
     * @return
     *     returns webservice.Recipe
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getRecipe4", targetNamespace = "http://webservice/", className = "webservice.GetRecipe4")
    @ResponseWrapper(localName = "getRecipe4Response", targetNamespace = "http://webservice/", className = "webservice.GetRecipe4Response")
    @Action(input = "http://webservice/WS/getRecipe4Request", output = "http://webservice/WS/getRecipe4Response")
    public Recipe getRecipe4(
        @WebParam(name = "id", targetNamespace = "")
        int id,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "preparationTime", targetNamespace = "")
        int preparationTime,
        @WebParam(name = "cookingTime", targetNamespace = "")
        int cookingTime,
        @WebParam(name = "likeNumber", targetNamespace = "")
        int likeNumber,
        @WebParam(name = "quantity", targetNamespace = "")
        int quantity,
        @WebParam(name = "account", targetNamespace = "")
        int account,
        @WebParam(name = "difficulty", targetNamespace = "")
        int difficulty,
        @WebParam(name = "type", targetNamespace = "")
        int type,
        @WebParam(name = "tagsID", targetNamespace = "")
        List<Tag> tagsID);

    /**
     * 
     * @param name
     * @param id
     * @return
     *     returns webservice.Ingredient
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getIngredient3", targetNamespace = "http://webservice/", className = "webservice.GetIngredient3")
    @ResponseWrapper(localName = "getIngredient3Response", targetNamespace = "http://webservice/", className = "webservice.GetIngredient3Response")
    @Action(input = "http://webservice/WS/getIngredient3Request", output = "http://webservice/WS/getIngredient3Response")
    public Ingredient getIngredient3(
        @WebParam(name = "id", targetNamespace = "")
        int id,
        @WebParam(name = "name", targetNamespace = "")
        String name);

    /**
     * 
     * @param recipeId
     * @return
     *     returns webservice.Account
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAccountById", targetNamespace = "http://webservice/", className = "webservice.GetAccountById")
    @ResponseWrapper(localName = "getAccountByIdResponse", targetNamespace = "http://webservice/", className = "webservice.GetAccountByIdResponse")
    @Action(input = "http://webservice/WS/getAccountByIdRequest", output = "http://webservice/WS/getAccountByIdResponse")
    public Account getAccountById(
        @WebParam(name = "recipeId", targetNamespace = "")
        int recipeId);

    /**
     * 
     * @param accountId
     * @param recipeId
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "isFavorite", targetNamespace = "http://webservice/", className = "webservice.IsFavorite")
    @ResponseWrapper(localName = "isFavoriteResponse", targetNamespace = "http://webservice/", className = "webservice.IsFavoriteResponse")
    @Action(input = "http://webservice/WS/isFavoriteRequest", output = "http://webservice/WS/isFavoriteResponse")
    public boolean isFavorite(
        @WebParam(name = "accountId", targetNamespace = "")
        int accountId,
        @WebParam(name = "recipeId", targetNamespace = "")
        int recipeId);

    /**
     * 
     * @param id
     * @return
     *     returns webservice.Ustensil
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getUstensil1", targetNamespace = "http://webservice/", className = "webservice.GetUstensil1")
    @ResponseWrapper(localName = "getUstensil1Response", targetNamespace = "http://webservice/", className = "webservice.GetUstensil1Response")
    @Action(input = "http://webservice/WS/getUstensil1Request", output = "http://webservice/WS/getUstensil1Response")
    public Ustensil getUstensil1(
        @WebParam(name = "id", targetNamespace = "")
        int id);

    /**
     * 
     * @param name
     * @param id
     * @return
     *     returns webservice.Ustensil
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getUstensil3", targetNamespace = "http://webservice/", className = "webservice.GetUstensil3")
    @ResponseWrapper(localName = "getUstensil3Response", targetNamespace = "http://webservice/", className = "webservice.GetUstensil3Response")
    @Action(input = "http://webservice/WS/getUstensil3Request", output = "http://webservice/WS/getUstensil3Response")
    public Ustensil getUstensil3(
        @WebParam(name = "id", targetNamespace = "")
        int id,
        @WebParam(name = "name", targetNamespace = "")
        String name);

    /**
     * 
     * @return
     *     returns java.util.List<webservice.Account>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAccounts", targetNamespace = "http://webservice/", className = "webservice.GetAccounts")
    @ResponseWrapper(localName = "getAccountsResponse", targetNamespace = "http://webservice/", className = "webservice.GetAccountsResponse")
    @Action(input = "http://webservice/WS/getAccountsRequest", output = "http://webservice/WS/getAccountsResponse")
    public List<Account> getAccounts();

    /**
     * 
     * @param accountId
     * @param recipeId
     */
    @WebMethod
    @RequestWrapper(localName = "addFavorite", targetNamespace = "http://webservice/", className = "webservice.AddFavorite")
    @ResponseWrapper(localName = "addFavoriteResponse", targetNamespace = "http://webservice/", className = "webservice.AddFavoriteResponse")
    @Action(input = "http://webservice/WS/addFavoriteRequest", output = "http://webservice/WS/addFavoriteResponse")
    public void addFavorite(
        @WebParam(name = "accountId", targetNamespace = "")
        int accountId,
        @WebParam(name = "recipeId", targetNamespace = "")
        int recipeId);

    /**
     * 
     * @param ingredient
     * @param quantity
     * @param recipeId
     */
    @WebMethod
    @RequestWrapper(localName = "addIngredient", targetNamespace = "http://webservice/", className = "webservice.AddIngredient")
    @ResponseWrapper(localName = "addIngredientResponse", targetNamespace = "http://webservice/", className = "webservice.AddIngredientResponse")
    @Action(input = "http://webservice/WS/addIngredientRequest", output = "http://webservice/WS/addIngredientResponse")
    public void addIngredient(
        @WebParam(name = "ingredient", targetNamespace = "")
        Ingredient ingredient,
        @WebParam(name = "quantity", targetNamespace = "")
        int quantity,
        @WebParam(name = "recipeId", targetNamespace = "")
        int recipeId);

    /**
     * 
     * @return
     *     returns java.util.List<webservice.Difficulty>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getDifficulties", targetNamespace = "http://webservice/", className = "webservice.GetDifficulties")
    @ResponseWrapper(localName = "getDifficultiesResponse", targetNamespace = "http://webservice/", className = "webservice.GetDifficultiesResponse")
    @Action(input = "http://webservice/WS/getDifficultiesRequest", output = "http://webservice/WS/getDifficultiesResponse")
    public List<Difficulty> getDifficulties();

    /**
     * 
     * @param content
     * @return
     *     returns webservice.Step
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getStep1", targetNamespace = "http://webservice/", className = "webservice.GetStep1")
    @ResponseWrapper(localName = "getStep1Response", targetNamespace = "http://webservice/", className = "webservice.GetStep1Response")
    @Action(input = "http://webservice/WS/getStep1Request", output = "http://webservice/WS/getStep1Response")
    public Step getStep1(
        @WebParam(name = "content", targetNamespace = "")
        String content);

    /**
     * 
     * @return
     *     returns java.util.List<webservice.Tag>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getTags", targetNamespace = "http://webservice/", className = "webservice.GetTags")
    @ResponseWrapper(localName = "getTagsResponse", targetNamespace = "http://webservice/", className = "webservice.GetTagsResponse")
    @Action(input = "http://webservice/WS/getTagsRequest", output = "http://webservice/WS/getTagsResponse")
    public List<Tag> getTags();

    /**
     * 
     * @param tag
     * @param recipeId
     */
    @WebMethod
    @RequestWrapper(localName = "addTag", targetNamespace = "http://webservice/", className = "webservice.AddTag")
    @ResponseWrapper(localName = "addTagResponse", targetNamespace = "http://webservice/", className = "webservice.AddTagResponse")
    @Action(input = "http://webservice/WS/addTagRequest", output = "http://webservice/WS/addTagResponse")
    public void addTag(
        @WebParam(name = "tag", targetNamespace = "")
        Tag tag,
        @WebParam(name = "recipeId", targetNamespace = "")
        int recipeId);

    /**
     * 
     * @param email
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "mailIsValid", targetNamespace = "http://webservice/", className = "webservice.MailIsValid")
    @ResponseWrapper(localName = "mailIsValidResponse", targetNamespace = "http://webservice/", className = "webservice.MailIsValidResponse")
    @Action(input = "http://webservice/WS/mailIsValidRequest", output = "http://webservice/WS/mailIsValidResponse")
    public boolean mailIsValid(
        @WebParam(name = "email", targetNamespace = "")
        String email);

    /**
     * 
     * @param step
     * @param recipeId
     * @param order
     */
    @WebMethod
    @RequestWrapper(localName = "addStep", targetNamespace = "http://webservice/", className = "webservice.AddStep")
    @ResponseWrapper(localName = "addStepResponse", targetNamespace = "http://webservice/", className = "webservice.AddStepResponse")
    @Action(input = "http://webservice/WS/addStepRequest", output = "http://webservice/WS/addStepResponse")
    public void addStep(
        @WebParam(name = "step", targetNamespace = "")
        Step step,
        @WebParam(name = "order", targetNamespace = "")
        int order,
        @WebParam(name = "recipeId", targetNamespace = "")
        int recipeId);

    /**
     * 
     * @return
     *     returns int
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getLastStepId", targetNamespace = "http://webservice/", className = "webservice.GetLastStepId")
    @ResponseWrapper(localName = "getLastStepIdResponse", targetNamespace = "http://webservice/", className = "webservice.GetLastStepIdResponse")
    @Action(input = "http://webservice/WS/getLastStepIdRequest", output = "http://webservice/WS/getLastStepIdResponse")
    public int getLastStepId();

    /**
     * 
     * @return
     *     returns java.util.List<webservice.Ustensil>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getUstensils", targetNamespace = "http://webservice/", className = "webservice.GetUstensils")
    @ResponseWrapper(localName = "getUstensilsResponse", targetNamespace = "http://webservice/", className = "webservice.GetUstensilsResponse")
    @Action(input = "http://webservice/WS/getUstensilsRequest", output = "http://webservice/WS/getUstensilsResponse")
    public List<Ustensil> getUstensils();

    /**
     * 
     * @param quantity
     * @param ustensil
     * @param recipeId
     */
    @WebMethod
    @RequestWrapper(localName = "addUstensil", targetNamespace = "http://webservice/", className = "webservice.AddUstensil")
    @ResponseWrapper(localName = "addUstensilResponse", targetNamespace = "http://webservice/", className = "webservice.AddUstensilResponse")
    @Action(input = "http://webservice/WS/addUstensilRequest", output = "http://webservice/WS/addUstensilResponse")
    public void addUstensil(
        @WebParam(name = "ustensil", targetNamespace = "")
        Ustensil ustensil,
        @WebParam(name = "quantity", targetNamespace = "")
        int quantity,
        @WebParam(name = "recipeId", targetNamespace = "")
        int recipeId);

    /**
     * 
     * @param recipeId
     * @return
     *     returns java.util.List<webservice.Step>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getStepsById", targetNamespace = "http://webservice/", className = "webservice.GetStepsById")
    @ResponseWrapper(localName = "getStepsByIdResponse", targetNamespace = "http://webservice/", className = "webservice.GetStepsByIdResponse")
    @Action(input = "http://webservice/WS/getStepsByIdRequest", output = "http://webservice/WS/getStepsByIdResponse")
    public List<Step> getStepsById(
        @WebParam(name = "recipeId", targetNamespace = "")
        int recipeId);

    /**
     * 
     * @param recipeId
     * @return
     *     returns java.util.List<webservice.Tag>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getTagsById", targetNamespace = "http://webservice/", className = "webservice.GetTagsById")
    @ResponseWrapper(localName = "getTagsByIdResponse", targetNamespace = "http://webservice/", className = "webservice.GetTagsByIdResponse")
    @Action(input = "http://webservice/WS/getTagsByIdRequest", output = "http://webservice/WS/getTagsByIdResponse")
    public List<Tag> getTagsById(
        @WebParam(name = "recipeId", targetNamespace = "")
        int recipeId);

    /**
     * 
     * @param recipeId
     * @return
     *     returns java.util.List<webservice.Ustensil>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getUstensilsById", targetNamespace = "http://webservice/", className = "webservice.GetUstensilsById")
    @ResponseWrapper(localName = "getUstensilsByIdResponse", targetNamespace = "http://webservice/", className = "webservice.GetUstensilsByIdResponse")
    @Action(input = "http://webservice/WS/getUstensilsByIdRequest", output = "http://webservice/WS/getUstensilsByIdResponse")
    public List<Ustensil> getUstensilsById(
        @WebParam(name = "recipeId", targetNamespace = "")
        int recipeId);

}
